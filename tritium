#!/bin/bash

restore() {
    function conf() {
        IFS=':' read -r -a array <<< "$1"
        # shellcheck disable=SC2046
        # shellcheck disable=SC2005
        echo $(sudo sed -nr "/^\[${array[0]}\]/ { :l /^${array[1]}[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" /etc/mysql/debian.cnf)
    }
    MYSQL_USER=$(conf client:user)
    MYSQL_PASSWORD=$(conf client:password)
    ADD_CODE="############### tritium add ###############"

    if [[ ! $(cat ~/.bashrc) =~ $ADD_CODE ]]
    then
echo "
$ADD_CODE
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[\1]/'
}
export PS1=\"\${debian_chroot:+(\$debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[32m\]\$(parse_git_branch)\[\033[00m\]\$ \"
alias mysql@self='mycli -u$MYSQL_USER -p$MYSQL_PASSWORD'
" >> ~/.bashrc
    fi

    if [[ ! $(cat ~/.profile) =~ $ADD_CODE ]]
    then
echo "
$ADD_CODE
export GOROOT=/usr/lib/go
export GOPATH=~/Golang
export PATH=\$PATH:~/Golang/bin
" >> ~/.profile
    fi

    # install docker
    DOCKER_SOURCE="https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu"

    if [[ ! $(cat /etc/apt/sources.list) =~ $DOCKER_SOURCE ]]
    then
        sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] $DOCKER_SOURCE $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io
    fi
}

backup() {
    # control
    mkdir -p .dist/DEBIAN
echo "\
package: tritium
version: 0.0.1
architecture: amd64
maintainer: cisordeng
description: Restore and Backup.
depends: vim, nginx, mysql-server, mycli, golang, nodejs
" > .dist/DEBIAN/control
    # preinst
echo "\
#!/bin/bash
" > .dist/DEBIAN/preinst

    # postinst
echo "\
#!/bin/bash
function conf() {
    IFS=':' read -r -a array <<< \"\$1\"
    # shellcheck disable=SC2046
    # shellcheck disable=SC2005
    echo \$(sudo sed -nr \"/^\[\${array[0]}\]/ { :l /^\${array[1]}[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}\" /etc/mysql/debian.cnf)
}
MYSQL_USER=\$(conf client:user)
MYSQL_PASSWORD=\$(conf client:password)
USER=\$(eval getent passwd {\$(awk '/^UID_MIN/ {print \$2}' /etc/login.defs)..\$(awk '/^UID_MAX/ {print \$2}' /etc/login.defs)} | cut -d: -f1)
if [ -d /.tritiumhomefiles ]
then
    sudo cp -r /.tritiumhomefiles/* ~/
    for file in \$(ls -a /.tritiumhomefiles)
    do
        if [ \"\$file\" == \".\" ] || [ \"\$file\" == \"..\" ]
        then
            continue
        fi
        chown -R \$USER:\$USER ~/\$file
    done
    sudo rm -rf /.tritiumhomefiles
fi

sudo mysqldump -u\${MYSQL_USER} -p\${MYSQL_PASSWORD} --all-databases < /.mysql.sql
" > .dist/DEBIAN/postinst
sudo chmod +x .dist/DEBIAN/preinst .dist/DEBIAN/postinst

    # bash
    BASH_PATH=$(readlink -f "$0")
    mkdir -p  ".dist/usr/bin"
    cp "$BASH_PATH" ".dist/usr/bin/${NAME}"

    # add backup files
    BACKUP_FILES=$(cat ~/.tritiumfiles)
    USER=~
    for file in $BACKUP_FILES
    do
        absolute_file=$file
        if [[ $file == ~* ]]
        then
            absolute_file="$USER${file:1}"
        fi

        if [ ! -d "$absolute_file" ] && [ ! -f "$absolute_file" ]
        then
            echo "[$absolute_file] not directory or file!"
            continue
        fi
        EXIST_FILES[${#EXIST_FILES[@]}]=$file
        echo "add $file"
        cp -r --parents "$absolute_file" .dist

        if [[ $file == ~* ]]
        then
            absolute_file="$USER${file:1}"
        fi
    done

    mkdir -p .dist/.tritiumhomefiles
    if [ -d ".dist/${USER:1}" ]
    then
        mv .dist/${USER:1}/* .dist/.tritiumhomefiles/
        rm -rf .dist/home
    fi
    if [ -f ~/.tritiumfiles ]
    then
        cp ~/.tritiumfiles .dist/.tritiumhomefiles/
    fi
    printf "%s\n" "${EXIST_FILES[@]}" > ~/.tritiumfiles

    # mysql backup
    function conf() {
        IFS=':' read -r -a array <<< "$1"
        # shellcheck disable=SC2046
        # shellcheck disable=SC2005
        echo $(sudo sed -nr "/^\[${array[0]}\]/ { :l /^${array[1]}[ ]*=/ { s/.*=[ ]*//; p; q;}; n; b l;}" /etc/mysql/debian.cnf)
    }
    MYSQL_USER=$(conf client:user)
    MYSQL_PASSWORD=$(conf client:password)
    mysqldump -u$MYSQL_USER -p$MYSQL_PASSWORD --all-databases > .dist/.mysql.sql

    dpkg -b .dist "tritium_$(date "+%Y%m%d%H%M%S").deb"
#    rm -rf .dist
}

add() {
    file=$1
    if [ ! -d "$file" ] && [ ! -f "$file" ]
    then
        echo "[$file] not directory or file!"
        return
    fi

    USER=~
    if [[ $file == $USER* ]]
    then
        file="~${1:${#USER}}"
    fi

    if [ -f ~/.tritiumfiles ]
    then
        BACKUP_FILES=$(cat ~/.tritiumfiles)
        if [[ $BACKUP_FILES =~ $file ]]
        then
            echo "[$file] is exist!"
            return
        fi
    fi

    echo "$file" >> ~/.tritiumfiles
}

if [ "$1" == "restore" ]
then
    restore
elif [ "$1" == "backup" ]
then
    backup
elif [ "$1" == "add" ]
then
    add "$2"
else
  echo "missing parameter!"
fi
